<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hiyasame</title>
  
  <subtitle>山茶雾屿</subtitle>
  <link href="http://blog.coldrain.ink/atom.xml" rel="self"/>
  
  <link href="http://blog.coldrain.ink/"/>
  <updated>2024-05-14T17:16:51.000Z</updated>
  <id>http://blog.coldrain.ink/</id>
  
  <author>
    <name>寒雨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现一个 crepl</title>
    <link href="http://blog.coldrain.ink/2024/05/14/KEXzdAOJSo1UjlxaR0bcc6m5njT/"/>
    <id>http://blog.coldrain.ink/2024/05/14/KEXzdAOJSo1UjlxaR0bcc6m5njT/</id>
    <published>2024-05-14T17:01:24.000Z</published>
    <updated>2024-05-14T17:16:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://jyywiki.cn/OS/2024/labs/M4.md">https://jyywiki.cn/OS/2024/labs/M4.md</a></p><p>今年在追番蒋炎岩老师的 NJU OS 2024spring。因为之前已经做过不少 os lab，所以这次不打算做 os lab，但是发现 jyy 的非 OS lab 设计得都非常有意思，所以决定做一下。</p><p>以前我从来没有思考过 crepl 要怎么实现，没想到利用 gcc 就可以如此容易的实现一个 crepl，以前没怎么接触过的 so 库的用法和其本质也逐渐熟悉起来了。</p><p>虽说出于学术诚信上的考量 jyy 并不希望我们公开 lab 代码，但是这个 lab 确实没什么难的地方，相信不会有南大学子上网搜代码抄的。并且我因为偷懒直接使用了 <code>system</code> ，直接抄我的也得老老实实改成 <code>fork</code> &amp; <code>execve</code> 实现:D</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> wrapper_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> line[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">char</span> cmd[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">char</span> temp_so_path[] = <span class="string">&quot;/tmp/crepl_so.XXXXXX&quot;</span>;</span><br><span class="line">    <span class="type">char</span> temp_src_path[] = <span class="string">&quot;/tmp/crepl_src.XXXXXX&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配临时文件</span></span><br><span class="line">    <span class="type">int</span> fd = mkstemp(temp_so_path);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkstemp failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    fd = mkstemp(temp_src_path);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkstemp failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -Wno-implicit-function-declaration   </span></span><br><span class="line">    <span class="comment">// 用于绕过在调用其他函数场景下的隐式函数定义的检查</span></span><br><span class="line">    <span class="built_in">sprintf</span>(cmd,</span><br><span class="line">            <span class="string">&quot;gcc -Wno-implicit-function-declaration -xc &quot;</span></span><br><span class="line">            <span class="string">&quot;-shared -o %s %s&quot;</span>,</span><br><span class="line">            temp_so_path, temp_src_path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;crepl&gt; &quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fgets(line, <span class="keyword">sizeof</span>(line), <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// To be implemented.</span></span><br><span class="line">        <span class="comment">// printf(&quot;Got %zu chars.\n&quot;, strlen(line));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> is_function = <span class="built_in">strncmp</span>(line, <span class="string">&quot;int &quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;int &quot;</span>)) == <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> func_name[<span class="number">256</span>];</span><br><span class="line">        <span class="type">char</span> func[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_function) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(func, line);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(func_name, <span class="string">&quot;__expr_wrapper_%d&quot;</span>, wrapper_count++);</span><br><span class="line">            <span class="built_in">sprintf</span>(func, <span class="string">&quot;int %s() &#123; return %s; &#125;&quot;</span>, func_name, line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将函数写入临时文件</span></span><br><span class="line">        <span class="comment">// 如果是表达式，就编译成 so 然后 dlopen 执行 expr wrapper</span></span><br><span class="line">        FILE* file = fopen(temp_src_path, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Failed to open file&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s\n&quot;</span>, func);</span><br><span class="line">        fflush(file);</span><br><span class="line">        fclose(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只是添加函数定义的话不需要编译</span></span><br><span class="line">        <span class="keyword">if</span> (is_function) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OK.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译成 so</span></span><br><span class="line">        system(cmd);</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span> *handle;</span><br><span class="line">        <span class="type">int</span> (*function)(<span class="type">void</span>);</span><br><span class="line">        <span class="type">char</span> *error;</span><br><span class="line">        <span class="type">int</span> eval_result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载共享库</span></span><br><span class="line">        handle = dlopen(temp_so_path, RTLD_LAZY);</span><br><span class="line">        <span class="keyword">if</span> (!handle) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, dlerror());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除现有的错误</span></span><br><span class="line">        dlerror();</span><br><span class="line">        </span><br><span class="line">        *(<span class="type">void</span> **) (&amp;function) = dlsym(handle, func_name);</span><br><span class="line">        <span class="keyword">if</span> ((error = dlerror()) != <span class="literal">NULL</span>)  &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, error);</span><br><span class="line">            dlclose(handle);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用函数</span></span><br><span class="line">        eval_result = function();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭共享库</span></span><br><span class="line">        dlclose(handle);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;= %d.\n&quot;</span>, eval_result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://jyywiki.cn/OS/2024/labs/M4.md&quot;&gt;https://jyywiki.cn/OS/2024/labs/M4.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年在追番蒋炎岩老师的 NJU OS 2024spring。因为之前已经做过不少</summary>
      
    
    
    
    
    <category term="jyy" scheme="http://blog.coldrain.ink/tags/jyy/"/>
    
    <category term="os" scheme="http://blog.coldrain.ink/tags/os/"/>
    
    <category term="lab" scheme="http://blog.coldrain.ink/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>Linux 并发原语实现</title>
    <link href="http://blog.coldrain.ink/2024/03/03/QJR7dadPhoMef5xUVacc8mVqnGg/"/>
    <id>http://blog.coldrain.ink/2024/03/03/QJR7dadPhoMef5xUVacc8mVqnGg/</id>
    <published>2024-03-03T10:49:16.000Z</published>
    <updated>2024-03-03T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前听到群里有人在问条件变量的实现，发现自己对这方面一无所知。<br><img src="/images/OYlxbkXGfo4geHxkLPicyw8Wnke.jpeg" alt="image"></p><h2 id="先复习一下-xv6"><a href="#先复习一下-xv6" class="headerlink" title="先复习一下 xv6"></a>先复习一下 xv6</h2><p>内核中用到了两种锁，自旋锁和睡眠锁。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>先看看实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Acquire the lock.</span></span><br><span class="line"><span class="comment">// Loops (spins) until the lock is acquired.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">acquire</span><span class="params">(<span class="keyword">struct</span> spinlock *lk)</span></span><br><span class="line">&#123;</span><br><span class="line">  push_off(); <span class="comment">// disable interrupts to avoid deadlock.</span></span><br><span class="line">  <span class="keyword">if</span>(holding(lk))</span><br><span class="line">    panic(<span class="string">&quot;acquire&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// On RISC-V, sync_lock_test_and_set turns into an atomic swap:</span></span><br><span class="line">  <span class="comment">//   a5 = 1</span></span><br><span class="line">  <span class="comment">//   s1 = &amp;lk-&gt;locked</span></span><br><span class="line">  <span class="comment">//   amoswap.w.aq a5, a5, (s1)</span></span><br><span class="line">  <span class="keyword">while</span>(__sync_lock_test_and_set(&amp;lk-&gt;locked, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tell the C compiler and the processor to not move loads or stores</span></span><br><span class="line">  <span class="comment">// past this point, to ensure that the critical section&#x27;s memory</span></span><br><span class="line">  <span class="comment">// references happen strictly after the lock is acquired.</span></span><br><span class="line">  <span class="comment">// On RISC-V, this emits a fence instruction.</span></span><br><span class="line">  __sync_synchronize();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Record info about lock acquisition for holding() and debugging.</span></span><br><span class="line">  lk-&gt;cpu = mycpu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Release the lock.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">release</span><span class="params">(<span class="keyword">struct</span> spinlock *lk)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!holding(lk))</span><br><span class="line">    panic(<span class="string">&quot;release&quot;</span>);</span><br><span class="line"></span><br><span class="line">  lk-&gt;cpu = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tell the C compiler and the CPU to not move loads or stores</span></span><br><span class="line">  <span class="comment">// past this point, to ensure that all the stores in the critical</span></span><br><span class="line">  <span class="comment">// section are visible to other CPUs before the lock is released,</span></span><br><span class="line">  <span class="comment">// and that loads in the critical section occur strictly before</span></span><br><span class="line">  <span class="comment">// the lock is released.</span></span><br><span class="line">  <span class="comment">// On RISC-V, this emits a fence instruction.</span></span><br><span class="line">  __sync_synchronize();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Release the lock, equivalent to lk-&gt;locked = 0.</span></span><br><span class="line">  <span class="comment">// This code doesn&#x27;t use a C assignment, since the C standard</span></span><br><span class="line">  <span class="comment">// implies that an assignment might be implemented with</span></span><br><span class="line">  <span class="comment">// multiple store instructions.</span></span><br><span class="line">  <span class="comment">// On RISC-V, sync_lock_release turns into an atomic swap:</span></span><br><span class="line">  <span class="comment">//   s1 = &amp;lk-&gt;locked</span></span><br><span class="line">  <span class="comment">//   amoswap.w zero, zero, (s1)</span></span><br><span class="line">  __sync_lock_release(&amp;lk-&gt;locked);</span><br><span class="line"></span><br><span class="line">  pop_off();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出自旋锁是基于指令集提供的原子 compare and swap 操作实现的，如果存在锁竞争的情况，没有获取到锁的一侧会自旋等到锁的释放。</p><h3 id="睡眠锁"><a href="#睡眠锁" class="headerlink" title="睡眠锁"></a>睡眠锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">acquiresleep</span><span class="params">(<span class="keyword">struct</span> sleeplock *lk)</span></span><br><span class="line">&#123;</span><br><span class="line">  acquire(&amp;lk-&gt;lk);</span><br><span class="line">  <span class="keyword">while</span> (lk-&gt;locked) &#123;</span><br><span class="line">    sleep(lk, &amp;lk-&gt;lk);</span><br><span class="line">  &#125;</span><br><span class="line">  lk-&gt;locked = <span class="number">1</span>;</span><br><span class="line">  lk-&gt;pid = myproc()-&gt;pid;</span><br><span class="line">  release(&amp;lk-&gt;lk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">releasesleep</span><span class="params">(<span class="keyword">struct</span> sleeplock *lk)</span></span><br><span class="line">&#123;</span><br><span class="line">  acquire(&amp;lk-&gt;lk);</span><br><span class="line">  lk-&gt;locked = <span class="number">0</span>;</span><br><span class="line">  lk-&gt;pid = <span class="number">0</span>;</span><br><span class="line">  wakeup(lk);</span><br><span class="line">  release(&amp;lk-&gt;lk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Atomically release lock and sleep on chan.</span></span><br><span class="line"><span class="comment">// Reacquires lock when awakened.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">sleep</span><span class="params">(<span class="type">void</span> *chan, <span class="keyword">struct</span> spinlock *lk)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Must acquire p-&gt;lock in order to</span></span><br><span class="line">  <span class="comment">// change p-&gt;state and then call sched.</span></span><br><span class="line">  <span class="comment">// Once we hold p-&gt;lock, we can be</span></span><br><span class="line">  <span class="comment">// guaranteed that we won&#x27;t miss any wakeup</span></span><br><span class="line">  <span class="comment">// (wakeup locks p-&gt;lock),</span></span><br><span class="line">  <span class="comment">// so it&#x27;s okay to release lk.</span></span><br><span class="line"></span><br><span class="line">  acquire(&amp;p-&gt;lock);  <span class="comment">//DOC: sleeplock1</span></span><br><span class="line">  release(lk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Go to sleep.</span></span><br><span class="line">  p-&gt;chan = chan;</span><br><span class="line">  p-&gt;state = SLEEPING;</span><br><span class="line"></span><br><span class="line">  sched();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tidy up.</span></span><br><span class="line">  p-&gt;chan = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reacquire original lock.</span></span><br><span class="line">  release(&amp;p-&gt;lock);</span><br><span class="line">  acquire(lk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wake up all processes sleeping on chan.</span></span><br><span class="line"><span class="comment">// Must be called without any p-&gt;lock.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">wakeup</span><span class="params">(<span class="type">void</span> *chan)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p != myproc())&#123;</span><br><span class="line">      acquire(&amp;p-&gt;lock);</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;state == SLEEPING &amp;&amp; p-&gt;chan == chan) &#123;</span><br><span class="line">        p-&gt;state = RUNNABLE;</span><br><span class="line">      &#125;</span><br><span class="line">      release(&amp;p-&gt;lock);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也很简单，通过自旋锁确保修改锁状态操作的原子性。发现存在竞争就直接 sleep，拿到锁的 routine 在释放锁时会修改同一条 channel 上（就是在等待同一把睡眠锁的进程）的进程的 pcb 状态到 runnable 等待内核调度。</p><p>可以看出这里的实现相当类似于 condition variable。</p><h2 id="Mutex-实现"><a href="#Mutex-实现" class="headerlink" title="Mutex 实现"></a>Mutex 实现</h2><p>我们看看 musl 中 pthread mutex api 的实现</p><h3 id="pthread-mutex-lock"><a href="#pthread-mutex-lock" class="headerlink" title="pthread_mutex_lock"></a>pthread_mutex_lock</h3><p>这里我只研究默认情况下的链路 <code>PTHREAD_MUTEX_NORMAL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __pthread_mutex_lock(<span class="type">pthread_mutex_t</span> *m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((m-&gt;_m_type&amp;<span class="number">15</span>) == PTHREAD_MUTEX_NORMAL</span><br><span class="line">        &amp;&amp; !a_cas(&amp;m-&gt;_m_lock, <span class="number">0</span>, EBUSY))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __pthread_mutex_timedlock(m, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __pthread_mutex_timedlock(<span class="type">pthread_mutex_t</span> *<span class="keyword">restrict</span> m, <span class="type">const</span> <span class="keyword">struct</span> timespec *<span class="keyword">restrict</span> at)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((m-&gt;_m_type&amp;<span class="number">15</span>) == PTHREAD_MUTEX_NORMAL</span><br><span class="line">        &amp;&amp; !a_cas(&amp;m-&gt;_m_lock, <span class="number">0</span>, EBUSY))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> type = m-&gt;_m_type;</span><br><span class="line">    <span class="type">int</span> r, t, priv = (type &amp; <span class="number">128</span>) ^ <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    r = __pthread_mutex_trylock(m);</span><br><span class="line">    <span class="keyword">if</span> (r != EBUSY) <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type&amp;<span class="number">8</span>) <span class="keyword">return</span> pthread_mutex_timedlock_pi(m, at);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> spins = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span> (spins-- &amp;&amp; m-&gt;_m_lock &amp;&amp; !m-&gt;_m_waiters) a_spin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((r=__pthread_mutex_trylock(m)) == EBUSY) &#123;</span><br><span class="line">        r = m-&gt;_m_lock;</span><br><span class="line">        <span class="type">int</span> own = r &amp; <span class="number">0x3fffffff</span>;</span><br><span class="line">        <span class="keyword">if</span> (!own &amp;&amp; (!r || (type&amp;<span class="number">4</span>)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ((type&amp;<span class="number">3</span>) == PTHREAD_MUTEX_ERRORCHECK</span><br><span class="line">            &amp;&amp; own == __pthread_self()-&gt;tid)</span><br><span class="line">            <span class="keyword">return</span> EDEADLK;</span><br><span class="line"></span><br><span class="line">        a_inc(&amp;m-&gt;_m_waiters);</span><br><span class="line">        t = r | <span class="number">0x80000000</span>;</span><br><span class="line">        a_cas(&amp;m-&gt;_m_lock, r, t);</span><br><span class="line">        r = __timedwait(&amp;m-&gt;_m_lock, t, CLOCK_REALTIME, at, priv);</span><br><span class="line">        a_dec(&amp;m-&gt;_m_waiters);</span><br><span class="line">        <span class="keyword">if</span> (r &amp;&amp; r != EINTR) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是维护了一个 waiter list，跟 xv6 睡眠锁的实现其实并没有很大区别</p><h2 id="Condition-Variable-实现"><a href="#Condition-Variable-实现" class="headerlink" title="Condition Variable 实现"></a>Condition Variable 实现</h2><p>比较古早的实现是每个条件变量维护一个 waiter list，利用信号唤醒进程（linuxthreads）</p><p>Musl 的实现是直接使用 <a href="https://man7.org/linux/man-pages/man2/futex.2.html">futex</a> 系统调用，使用信号唤醒线程的开销不可谓不大，将实现移到内核中再封装成系统调用会好不少。<br><img src="/images/FckhbLAWmoLDFoxJqrrcp0QYnIg.png" alt="image"><br><img src="/images/QnT9bKtwBoM6xuxERfac2lmjnvf.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;之前听到群里有人在问条件变量的实现，发现自己对这方面一无所知。&lt;br&gt;&lt;img src=&quot;/images/OYlxbkXGfo4geHxkL</summary>
      
    
    
    
    <category term="笔记" scheme="http://blog.coldrain.ink/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="xv6" scheme="http://blog.coldrain.ink/tags/xv6/"/>
    
    <category term="linux" scheme="http://blog.coldrain.ink/tags/linux/"/>
    
    <category term="libc" scheme="http://blog.coldrain.ink/tags/libc/"/>
    
    <category term="并发" scheme="http://blog.coldrain.ink/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>博客写作部署分离实践</title>
    <link href="http://blog.coldrain.ink/2024/01/18/GcC9d15VKoMKpixcYB5cPntunsf/"/>
    <id>http://blog.coldrain.ink/2024/01/18/GcC9d15VKoMKpixcYB5cPntunsf/</id>
    <published>2024-01-18T08:10:27.000Z</published>
    <updated>2024-01-18T09:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用了 <a href="https://elog.1874.cool/">Elog</a> 一键同步飞书文档上编写的博客文章到 hexo 仓库，以后博文迁移到飞书文档上编写。</p><p>发现这玩意好像也不是很好用，感觉可以自己写一个。不过感觉有点浪费时间，算了。</p><blockquote><p>该博文同步自飞书文档</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用了 &lt;a href=&quot;https://elog.1874.cool/&quot;&gt;Elog&lt;/a&gt; 一键同步飞书文档上编写的博客文章到 hexo 仓库，以后博文迁移到飞书文档上编写。&lt;/p&gt;
&lt;p&gt;发现这玩意好像也不是很好用，感觉可以自己写一个。不过感觉有点浪费时间，算了。&lt;/p</summary>
      
    
    
    
    
    <category term="随笔" scheme="http://blog.coldrain.ink/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2023年度总结</title>
    <link href="http://blog.coldrain.ink/2023/12/30/Ehapd5iqkom3e3xScJUcxPB7nfe/"/>
    <id>http://blog.coldrain.ink/2023/12/30/Ehapd5iqkom3e3xScJUcxPB7nfe/</id>
    <published>2023-12-30T18:22:00.000Z</published>
    <updated>2024-01-18T09:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CS-公开课"><a href="#CS-公开课" class="headerlink" title="CS 公开课"></a><strong>CS 公开课</strong></h2><ul><li><p>北大编译实践</p><ul><li>算是编译器方面的一个启蒙，不过感觉连入门都算不上</li></ul></li><li><p>CMU 15-213 CSAPP</p><ul><li>其实课刷得有点马虎，不过把 lab 过完了<ul><li>这课早晚得再过一遍</li></ul></li></ul></li><li><p>MIT 6.S081</p><ul><li>对系统内核理解 0 的突破，也学着读了一些英文论文</li></ul></li><li><p>参加了清华组织的 rcore 开源操作系统训练营，混了个结营证书</p><ul><li>因为是实习期间做的，所以其实有点水，不过实验都做完了，也学了一些工程项目中内核的调试方法，也不算毫无收获<ul><li>复习了一下 Rust</li></ul></li></ul></li><li><p>CS106X （正在学习）</p><ul><li>本意是想过一遍 cpp，后来发现其实基础的算法和数据结构讲得更多。<ul><li>不过听着感觉也不错，巩固下基础，对以后做力扣题也很有帮助。</li></ul></li></ul></li><li><p>参加了达坦科技的 MIT 体系结构公开课开源学习社区，现在在看 MIT 6.004</p><ul><li><p>会学 Bluespec，lab 是做 MIT 6.175 的，内容是用 bluespec 搓颗 RISC-V CPU</p></li><li><p>真搓出来了想在上面跑 rcore（_我的天，还有比在自己写的 CPU 上跑自己写的系统内核更酷的事情吗_）</p></li></ul></li></ul><p>猛然发现 2023 是我的 CS 启蒙一年，2022 的我在通过红岩网校的考核后便陷入了迷茫。一边维持着摆烂状态，一边漫无目的的倒腾着自己感兴趣的小东西。这期间第一次系统学了 Rust，然后发现了北大的编译实践 lab。做完以后对编译器相关的知识产生了兴趣，想要系统的学习，于是我第一次了解到国外的公开课 （Stanford CS143）。</p><p>其实年初是想系统的学下编译原理（Stanford CS143）的，不过半途而废了。不过在求学的途中听人劝告去学了 CSAPP，之后便一发不可收拾。</p><p>当然我对今年的学习进度并不满意，实在太慢太摸了。接下来计划要学的公开课已经堆积如山了：</p><ul><li><p>CS106L 现代cpp</p></li><li><p>CMU 15-445 数据库系统</p></li><li><p>MIT 6.824 分布式系统</p></li><li><p>CS162 操作系统内核</p></li><li><p>CS144 计算机网络</p></li><li><p>CS143 编译原理</p></li></ul><p>任重而道远啊</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><ul><li><p>去了快手实习</p><ul><li>嗯，虽然做的都是一些像搬砖一样的业务开发，技术上学不到什么东西。不过至少了解了互联网大厂项目的开发流程，并且在解决具体问题的能力（定位问题，debug，开发业务功能）上有了长足的进步。<ul><li>有了这一段实习经历，之后 Android 开发方向的转正实习应该就不难找了，算是给自己留了条后路</li><li>第一次前往异乡租房住，见识了北京浮夸的房价</li></ul></li></ul></li><li><p>思想上发生了转变</p><ul><li>经过今年发生的事情和我自己的一些思考：<ul><li>更愿意相信自由市场<ul><li>更加忧虑自己的未来，想要轻松的活着，做自己想做的事情</li></ul></li></ul></li></ul></li><li><p>因为 MyGo 入坑了邦邦，并且在看完后的数个月内念念不忘</p><ul><li>你能看看 MyGo 吗，我什么都会做的😭</li></ul></li></ul><p>最后说说我目前的目标吧，尽可能多的学习 CS 知识，找一个做基础软件研发的实习，以此为契机确定未来的职业发展方向。当然要是做不到也能滚回去做 Android 开发，至少还有条后路。</p><p>那么，就这样吧，希望 2024 结束时能给自己一个满意的答复。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CS-公开课&quot;&gt;&lt;a href=&quot;#CS-公开课&quot; class=&quot;headerlink&quot; title=&quot;CS 公开课&quot;&gt;&lt;/a&gt;&lt;strong&gt;CS 公开课&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;北大编译实践&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算是编译器方面的</summary>
      
    
    
    
    
    <category term="年度总结" scheme="http://blog.coldrain.ink/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    <category term="随笔" scheme="http://blog.coldrain.ink/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>周报</title>
    <link href="http://blog.coldrain.ink/2023/12/25/FashdhbmXovCtwxNwgHckhrunRt/"/>
    <id>http://blog.coldrain.ink/2023/12/25/FashdhbmXovCtwxNwgHckhrunRt/</id>
    <published>2023-12-25T04:25:01.000Z</published>
    <updated>2024-01-18T09:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023-12-18-12-24"><a href="#2023-12-18-12-24" class="headerlink" title="2023.12.18~12.24"></a>2023.12.18~12.24</h1><p>因为游戏账号被封了一个月所以开始写周报 push 自己学习的第一周（</p><p>看到学弟在学 6.824，说实话有点慌，真得 push 一下自己了</p><h3 id="学习-amp-工作"><a href="#学习-amp-工作" class="headerlink" title="学习 &amp; 工作"></a><strong>学习 &amp; 工作</strong></h3><ul><li><p>完成 CS106B 的 assignment 1，2</p></li><li><p>目前为止都是一些很简单的内容，还没有涉及到我比较想学的部分</p></li><li><p>参加了</p><p>Datenlord 的 mit 体系结构公开课学习社区</p></li><li><p>学习的课程是 6.004 6.175 6.375 ，这三门课的知识点重复度很高，大概只需要看 6.004 的课，做 6.175 的 lab，穿插学习 6.375 即可</p></li><li><p>不过大概率不会坚持到最后，只是一个学习计组的契机</p></li><li><p>学习体系结构的过程中也会并发进行另一门公开课的学习，目前是 CS106X，之后会做 445 和 824</p></li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a><strong>生活</strong></h3><ul><li>久违的下了个音游（邦邦）来玩，发现了一首<a href="https://open.spotify.com/track/0bmJzYti6K65ytyLH6VTMR?si=809fadc6c8b04a47">很不错的曲子</a></li></ul><h2 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a><strong>下周计划</strong></h2><p>下周其实离考试周就很近了，所以不一定能做完</p><ul><li><p>过完 6.004 讲 bluespec 之前的内容</p></li><li><p>过完一半 CS106X 的课，至少再完成 CS106B 的两个 lab</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023-12-18-12-24&quot;&gt;&lt;a href=&quot;#2023-12-18-12-24&quot; class=&quot;headerlink&quot; title=&quot;2023.12.18~12.24&quot;&gt;&lt;/a&gt;2023.12.18~12.24&lt;/h1&gt;&lt;p&gt;因为游戏账号被封了一个月所以</summary>
      
    
    
    
    
    <category term="周报" scheme="http://blog.coldrain.ink/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>解决 bear 在 MacOS 中生成空 compile_commands.json</title>
    <link href="http://blog.coldrain.ink/2023/10/21/URYldeyG7okwIlxnz6lcVpvHnqE/"/>
    <id>http://blog.coldrain.ink/2023/10/21/URYldeyG7okwIlxnz6lcVpvHnqE/</id>
    <published>2023-10-21T17:50:29.000Z</published>
    <updated>2024-01-18T17:47:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做到 xv6 的最后一个 lab 时，我终于忍受不了满屏的爆红，着手开始配置代码高亮。参考  <a href="https://zhuanlan.zhihu.com/p/501901665">https://zhuanlan.zhihu.com/p/501901665</a> 配置 Intellisense，然后我遇到了一个问题：</p><blockquote><p>make clean &amp;&amp; bear — make qemu 生成空 compile_commands.json</p></blockquote><p>我 google 查了一下，目前没有中文博客提到这个问题。我在 Bear 的 issue 下发现这个问题已经老生常谈了，因为 linux 和 macos 下 bear 的工作原理不同：</p><blockquote><p>For your problem, here is a little background information… Bear works differently on Linux and Mac. On Linux it intercept the process executions with a preloaded shared object. This trick does not work on Mac. Instead it use compiler wrapper, which reports the process executions… The compiler wrapper interposing only works with builds, which are open to override the compiler.</p></blockquote><p>所以其实在 mac 上，bear 预先准备了一系列常用编译器的wrapper。</p><p><img src="/images/Aehabd73Oo6zokxkpaPcMfiWn1g.png" alt="image"></p><p>因为 xv6 使用的编译器是 <code>riscv-unknown-elf-gcc</code> , 没有预置它的 wrapper。所以我们需要手动创建它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /opt/homebrew/Cellar/bear/3.1.3_7/lib/bear/wrapper \\</span><br><span class="line">/opt/homebrew/Cellar/bear/3.1.3_7/lib/bear/wrapper.d/riscv-unknown-elf-gcc</span><br></pre></td></tr></table></figure><p>然后 bear 就可以正常工作了:D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在做到 xv6 的最后一个 lab 时，我终于忍受不了满屏的爆红，着手开始配置代码高亮。参考  &lt;a href=&quot;https://zhuanlan.zhihu.com/p/501901665&quot;&gt;https://zhuanlan.zhihu.com/p/501901665&lt;/</summary>
      
    
    
    
    
    <category term="xv6" scheme="http://blog.coldrain.ink/tags/xv6/"/>
    
    <category term="编译" scheme="http://blog.coldrain.ink/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>virtual-memory-for-user-applications</title>
    <link href="http://blog.coldrain.ink/2023/10/20/Ro5td2HZloi6YzxPcKrc9aHbn9d/"/>
    <id>http://blog.coldrain.ink/2023/10/20/Ro5td2HZloi6YzxPcKrc9aHbn9d/</id>
    <published>2023-10-20T19:21:16.000Z</published>
    <updated>2024-01-18T17:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MIT 6.s081 lecture 17 个人总结笔记</p></blockquote><p>参考:</p><ul><li><p><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/lec17-virtual-memory-for-applications-frans">https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/lec17-virtual-memory-for-applications-frans</a></p></li><li><p><a href="https://pdos.csail.mit.edu/6.828/2020/readings/appel-li.pdf">https://pdos.csail.mit.edu/6.828/2020/readings/appel-li.pdf</a></p></li></ul><p>之前我们知道，virtual memory 的 page fault 已经被内核玩出了花。进程 fork 的 COW 机制，虚拟内存页表的驱除机制等等，都是利用了 page fault 这个机制实现的。page fault 很好用，那么我们能不能让用户程序也利用上 page fault 呢？</p><p>为了让用户程序有效的利用上 page fault 机制，操作系统内核需要向用户程序提供一系列原语（primitives）：</p><ul><li><p>Prot1 降低单个 page 的 accessibility (mprotect)</p></li><li><p>ProtN  降低 N 个 page 的 accessibility，之所以单独提出是因为保护多个 page 的平均开销更小 （只需要刷新一次 TLB）(mprotect)</p></li><li><p>Unprot 解除单个 page 的保护 (mprotect)</p></li><li><p>Dirty 查看一个 page 是否为 dirty page</p></li><li><p>map2 使得一个应用程序可以将一个特定的物理内存地址空间映射两次，并且这两次映射拥有不同的accessability (mmap)</p></li></ul><p>有了这些原语，用户程序就可以利用 page fault 的机制做一些更好的优化。</p><h2 id="eg-1-构建大的缓存表"><a href="#eg-1-构建大的缓存表" class="headerlink" title="eg.1 构建大的缓存表"></a><strong>eg.1 构建大的缓存表</strong></h2><p>我们可以用设计虚拟内存驱除机制的思路，利用上面提到的操作系统提供的一系列原语使用有限的虚拟内存构建一个非常大的缓存表。</p><p>下面提供一个比较极端的代码示例——只使用一页虚拟内存实现的缓存表</p><p><img src="/images/HHCzb2S1eoJIwOxYKkjcQAzRnrY.png" alt="image"></p><p><img src="/images/HNkJb2c3KoNEwjxUN09cvEXjn2f.png" alt="image"></p><p><img src="/images/M3ECbky79odXDkxrPwkc4hO4n3d.png" alt="image"></p><p><img src="/images/UJuvbnwDHo4ltYxm4kzcVE4xnCg.png" alt="image"></p><h2 id="eg-2-Baker’s-Real-Time-Copying-Garbage-Collector"><a href="#eg-2-Baker’s-Real-Time-Copying-Garbage-Collector" class="headerlink" title="eg.2 Baker’s Real-Time Copying Garbage Collector"></a><strong>eg.2 Baker’s Real-Time Copying Garbage Collector</strong></h2><blockquote><p>以前背过一些关于 GC 的 Java 八股文，没想到会在这里再接触到这个话题</p></blockquote><p>我们先讨论一种特定的 copying GC，假设你有一段内存作为heap，应用程序从其中申请内存。你将这段内存分为两个空间，其中一个是from空间，另一个是to空间。Copying GC 的基本思想是将仍然在使用的对象从 from 空间复制到 to 空间。在 to 空间满时进行翻转。至于如何识别对象是否在使用可以使用可达性分析算法。</p><p>背过 java 八股文的人就知道，我们希望尽可能缩短 copy 所花的时间，因为这段时间我们需要 stop the world。那么我们可不可以将 copy 所花费的时间成本均摊一下，不让程序触发 GC 后突兀的停顿很长一段时间？</p><p>我们可以使用设计 COW 的思路来做这件事，触发 GC 时我们只 copy GC root，将时间成本降到最低。然后我们将 GC root 标记为 unscanned （使用 prot 原语降低其可见性），在我们下次访问 GC root 时就会触发 page fault，进入到我们设置的 page fault handler。在 page fault handler 中将当前页中的地址指向的页也 copy 到 to space，对指针进行 forwarding （就是将指针的指向从原本在 from space 的内存转发到 to space 的内存），并且将其标记为 unscanned。然后我们将扫描过的页标记为 scanned（也就是对其进行 unprot 操作）。这样我们就成功的将 GC 的时间成本分摊到了程序读写虚拟内存的时候。</p><p>但是既然用户程序不能访问，访问了会导致 page fault，那 GC 线程要怎么访问呢？当然我们可以在 page fault handler 中使用 unprot 操作，但是这样做的话会导致并发的问题（在 GC 线程 unprot 后其他用户线程访问了这块内存）。所以我们需要 map2 原语，将一块物理内存映射到两块虚拟内存地址，一块供 GC 线程读写（可读写），一块供用户线程读写（unscanned的情况下不可读写）。这样便完美的解决了这个问题，同时我们获得了天然的并发性：因为 unscanned 状态下 GC 线程读写内存时用户线程无法读写这块内存内存，而 scanned 状态下用户线程读写内存时 GC 线程不会读写这块内存。</p><p><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/lec17-virtual-memory-for-applications-frans/17.7-shi-yong-xu-ni-nei-cun-te-xing-de-gc-dai-ma-zhan-shi">MIT的教授们用 C 语言代码言简意骇的实现了这种 GC</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MIT 6.s081 lecture 17 个人总结笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mit-public-courses-cn-translatio.gitb</summary>
      
    
    
    
    <category term="笔记" scheme="http://blog.coldrain.ink/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="xv6" scheme="http://blog.coldrain.ink/tags/xv6/"/>
    
    <category term="公开课" scheme="http://blog.coldrain.ink/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT6.s081" scheme="http://blog.coldrain.ink/tags/MIT6-s081/"/>
    
    <category term="操作系统" scheme="http://blog.coldrain.ink/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="虚拟内存" scheme="http://blog.coldrain.ink/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>xv6-fs</title>
    <link href="http://blog.coldrain.ink/2023/10/17/RLSwdlgCRo68xTxoNn6caCU1nRh/"/>
    <id>http://blog.coldrain.ink/2023/10/17/RLSwdlgCRo68xTxoNn6caCU1nRh/</id>
    <published>2023-10-17T13:09:23.000Z</published>
    <updated>2024-01-18T09:32:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>下文中没有具体说明的场景均描述 xv6 文件系统的实现</p></blockquote><p>好吧 我们就来详细捋一捋 fs</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a><strong>组成</strong></h2><p>&#x2F;&#x2F; todo</p><h2 id="事务-Transaction"><a href="#事务-Transaction" class="headerlink" title="事务 Transaction"></a><strong>事务 Transaction</strong></h2><blockquote><p>事务在用数据库的时候就已经经常用到了，但是没想到文件系统也有事务。从文件系统的事务实现中我们也可以管中窥豹数据库的事务是怎么实现的，数据库的 crash recovery 是如何保证的。</p></blockquote><h3 id="xv6"><a href="#xv6" class="headerlink" title="xv6"></a><strong>xv6</strong></h3><p>事务的作用是保证一组磁盘写操作的原子性 （即要么全部完成，要么全部失败)，从而支持 crash recovery。事务是我们对一组整体具有原子性的磁盘写操作的抽象，而我们是如何实现事务这个特性的呢？</p><p>当然是凭借日志系统。在xv6中，我们在执行一组磁盘写操作时，会先将这组写操作发到 block cache。block cache 就是磁盘 block 在内存中的 copy。</p><p>在write系统调用的最后（也就是事务结束时），这些更新都被从 block cache 拷贝到了 log 中，之后会更新 header block 的计数来表明当前的 transaction 已经结束了。</p><p>更新 header block 的计数这个操作是一个原子操作（得益于硬件支持），被称为 commit point。如果系统在 commit point 之前崩溃，则相当于事务在执行时中断，我们便放弃之前已有的全部更改。但如果系统在 commit point 之后崩溃，则相当于事务已经执行完毕（但是还没有回收）。虽然此时 log 中的变更还没有写入到磁盘对应的位置，但是即使在此时崩溃重启时也可以根据 log 中的记录恢复之前的更改。</p><p>commit point 之后当然是将 log 中的变更写回磁盘，然后清除 header block 中的计数（计数清除被视作释放了一个事务），至此一个事务的流程完成。</p><h3 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a><strong>ext3</strong></h3><p>ext3 是在真实世界中使用的一种文件系统实现，直到现在也仍然经常在 linux 上使用。我们可以轻易的在 linux 上以 ext3 文件系统的格式挂载一块硬盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fstab <span class="comment"># 在文件末尾加上 /dev/&lt;设备&gt; &lt;要挂载的路径&gt; ext3 defaults 1 1</span></span><br></pre></td></tr></table></figure><p>ext3 的实现思路是基于 <a href="https://pdos.csail.mit.edu/6.828/2020/readings/journal-design.pdf">Journaling the Linux ext2fs Filesystem</a> 中描述的一种高性能高可靠文件系统实现。其实现方式跟 xv6 的文件系统实现有很多类似的地方，不过因为其用于现实世界，所以比 xv6 考虑了更多细节，且总体上性能要更好（好得多）：</p><ul><li><p>ext3 提供了异步系统调用 ，即系统修改完 block cache 就直接返回（是的，ext3 上的 write 系统调用返回时数据其实还没有被写到磁盘上，在这个中途 crash 事务是有可能回滚的）</p></li><li><p>ext3 支持批处理 (batching) ，即 ext3 可以合并一段时间内的所有事务，最后将其作为一个大事务进行提交，这样做整体只会向磁盘中写入一次数据。</p><ul><li>首先批处理减少了事务带来的开销，从机械硬盘中查找log的位置实际上开销不小，而批处理合并了多个事务，减少了事务执行的次数。<ul><li>如果之前的多个事务中都修改了同一个block，批处理后写入磁盘时就只需要写入一次 (这种情况被称作 write absorbing)，相当于减少了磁盘 io。</li><li>批处理利好 disk scheduling</li><li>磁盘的读写也是具有局部性的，一次性的向磁盘的连续位置写入1000个block，要比分1000次每次写一个不同位置的磁盘block快得多。写log就是向磁盘的连续位置写block。通过向磁盘提交大批量的写操作，可以更加的高效。<ul><li>如果能将大量的写请求同时发送到驱动，即使它们位于磁盘的不同位置，我们也使得磁盘可以调度这些写请求，并以特定的顺序执行这些写请求，这也很有效。在一个机械硬盘上，如果一次发送大量需要更新block的写请求，驱动可以对这些写请求根据轨道号排序。甚至在一个固态硬盘中，通过一次发送给硬盘大量的更新操作也可以稍微提升性能。所以，只有发送给驱动大量的写操作，才有可能获得disk scheduling。这是batching带来的另一个好处。</li></ul></li></ul></li></ul></li><li><p>良好的并发性能 concurrency</p><ul><li>ext3 允许并行写操作，在一个总的事务提交之前，其他 write 系统调用不必等待到当前事务执行完毕，而是直接让 write 操作合并到当前事务当中。<ul><li>可以有不同的 transaction 同时存在，尽管只有一个 open transaction 可以接收系统调用。</li><li>一个 open transaction<ul><li>若干个正在commit到log的transaction，我们并不需要等待这些transaction结束。当之前的transaction还没有commit并还在写log的过程中，新的系统调用仍然可以在当前的open transaction中进行。</li><li>若干个正在从cache中向文件系统block写数据的transaction</li><li>若干个正在被释放的transaction，这个并不占用太多的工作</li><li>也就是说 提交事务 ，写入磁盘，释放事务 这三个操作都是异步的。</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;下文中没有具体说明的场景均描述 xv6 文件系统的实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好吧 我们就来详细捋一捋 fs&lt;/p&gt;
&lt;h2 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; class=&quot;headerlink&quot; title=&quot;组成&quot;</summary>
      
    
    
    
    <category term="笔记" scheme="http://blog.coldrain.ink/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="xv6" scheme="http://blog.coldrain.ink/tags/xv6/"/>
    
    <category term="公开课" scheme="http://blog.coldrain.ink/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT6.s081" scheme="http://blog.coldrain.ink/tags/MIT6-s081/"/>
    
    <category term="File System" scheme="http://blog.coldrain.ink/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>2023七月到九月总结</title>
    <link href="http://blog.coldrain.ink/2023/10/07/LTj7d5ZKsoQ3hRxaA9Acn3WAnUg/"/>
    <id>http://blog.coldrain.ink/2023/10/07/LTj7d5ZKsoQ3hRxaA9Acn3WAnUg/</id>
    <published>2023-10-07T14:19:19.000Z</published>
    <updated>2024-01-18T09:11:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023-7～9月总结"><a href="#2023-7～9月总结" class="headerlink" title="2023.7～9月总结"></a><strong>2023.7～9月总结</strong></h1><p>从北京回来了，实习基本算告一段落了。至少线下实习告一段落了，能不能继续线上还得等结论。借此机会把 2023.7 ～ 9 月做的事情总结一下：</p><h2 id="7月"><a href="#7月" class="headerlink" title="7月"></a><strong>7月</strong></h2><p>原本计划暑假里好好的把 xv6 给刷了，但是学长突然给了我快手实习的内推，于是暂时搁置了 cs 的学习，全心全意准备面试。一面自我感觉还算可以，但快手那边似乎是因为 hc 的问题迟迟不肯安排二面，鸽了我很长一段时间。这段时间最开始我是在准备面试的，然而等了好几天还没收到二面消息就重启了 xv6 的学习，记得是一口气做到了 traps lab，然后收到了快手的拒信。</p><p>收到拒信之后本着一不做二不休的原则又在 boss 直聘上海投，然而只收到了两家公司的面试邀约：禾多科技，字节跳动（抖音开放平台）。</p><p>禾多科技一面只问了20分钟，都是非常基础非常简单的问题，二面直接不问了，直接跟我介绍公司业务（做自动驾驶），但是因为只是随便投来练手的小厂，给的实习工资也不够我在北京生活，就拒了。</p><p>抖音开放平台面试问得比较有水平，可惜我算法苦手，而面试官又比较看重算法这一块，好死不死一面二面的算法题一道都没有做出来，当然是挂了。问了他们的业务，似乎是做抖音小程序的开放 api。</p><h2 id="8月"><a href="#8月" class="headerlink" title="8月"></a><strong>8月</strong></h2><p>因为没有找到实习，跟着父母一起去贵州旅游放松一下。这次去贵州旅游的体验确实很不错，印象最深刻的是韭菜坪上的一大片紫色野生韭菜花，非常的漂亮。</p><p>实习的事情在旅行的中途迎来了转机。快手的hr又找上我，告诉我被挂掉的原因是当时没有 hc 了，现在又有 hc 了，如果我还愿意来的话可以直接给我安排二面。而二面的面试官（也就是我后来的 leader）因为急着用人，面试也放了不少水。于是虽然晚了些，我在 8 月 17 号正式入职了快手。</p><p>不得不说那段时间我们部门确实是缺人，我在入职后只熟悉了两天代码便开始做第一个需求，mentor 忙得根本顾不上我，我遇上了问题大多数时候都是问学长（如果没有学长在的话我根本不知道怎么度过实习最开始那段时光）。实习两周之后，我基本熟悉互联网大厂产品的开发流程，并且感觉自己解决眼前的问题的能力有了长足的进步。</p><p>这段时间的实习生活过得很充实，很快乐。不用烦恼学校的事情，还有两位学长陪着。然而基本抽不出时间学 xv6，只在周末的时候完成了两个 lab。</p><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a><strong>9月</strong></h2><p>9月份学长们实习答辩完返校了，有一段时间都是我自己一个人在快手实习。没有了学长们的陪伴，实习生活确实变得乏味了些。然后就是处理一系列学校的破事，原本就打算瞒着辅导员请代课，结果父母不放心给辅导员打了电话。原本辅导员也不想管这个事情，奈何这学期换了个辅导员，这个辅导员是七月份新入职的，俗话说新官上任三把火，她这火直接烧我头上了。</p><p>本来那段时间工作就忙，再加上每天晚上要处理学校的破事，过得非常的痛苦。本来是想至少拖到十月末再回家，但是正巧跟学长们同租的房子也到期了，根本找不到能短租一个月的房子，再加上父母和学校那边给的压力，最后还是决定国庆节就回来。</p><p>顺便报了清华的开源操作系统训练营，先把 rustlings 刷了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>这个暑假还是没能静下心来学 cs，原本还计划暑假做完 xv6 的。不过至少最终还是找到了实习，见识了一线互联网大厂员工的工作生活状态，过得也算不错吧。</p><p>实习之后的感受就是完全抽不出时间来学习 cs，一想到毕业以后面临的就是这样的生活就感到非常害怕，想尽量在所剩不多的大学生活中多学习一些 cs 知识。我不确定这样做对我是好是坏，也许我更应该把时间花在研究 android 技术上，这样或许对我的未来的职业生涯更有好处。</p><p>但是学习并不只是为了就业，为了钱。我更希望学习一些更底层的，自己更感兴趣的知识，哪怕在工作上也许很少用到它们。我不想固守在 android 的一亩三分地里，更愿意在计算机科学的海洋中遨游，探索。</p><p>我这样想是对的吗？对我的未来有好处吗？我不知道，但至少可以确定的是我仍然在不断前进，如此就好，这样就好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023-7～9月总结&quot;&gt;&lt;a href=&quot;#2023-7～9月总结&quot; class=&quot;headerlink&quot; title=&quot;2023.7～9月总结&quot;&gt;&lt;/a&gt;&lt;strong&gt;2023.7～9月总结&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从北京回来了，实习基本算告一段落了</summary>
      
    
    
    
    
    <category term="总结" scheme="http://blog.coldrain.ink/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Handler Android 消息机制</title>
    <link href="http://blog.coldrain.ink/2023/07/04/N8Ald4KgDobdVPxjhhHc76zRnVg/"/>
    <id>http://blog.coldrain.ink/2023/07/04/N8Ald4KgDobdVPxjhhHc76zRnVg/</id>
    <published>2023-07-04T12:49:55.000Z</published>
    <updated>2024-01-18T09:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h2><p>handler 源码也算是老生常谈了，之前也简单研究过源码。首先列出比较重要的几个类</p><ul><li><p>Handler</p></li><li><p>MessageQueue</p></li><li><p>Message</p></li><li><p>Looper</p></li></ul><p>那么我们就从 Handler 最经典的用法开始分析</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> handler = <span class="keyword">object</span> : Handler(Looper.getMainLooper()) &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;处理消息&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">            setContentView(R.layout.activity_main)</span><br><span class="line">            handler.sendEmptyMessage(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就有两个入口可以分析 <code>Handler#sendMessage</code>, <code>Handler#handleMessage</code></p><h3 id="Handler-sendMessage"><a href="#Handler-sendMessage" class="headerlink" title="Handler#sendMessage"></a><strong>Handler#sendMessage</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体实现看sendMessageDelay</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现看 sendMessageAtTime</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(<span class="meta">@NonNull</span> Message msg, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到字段里的 MessageQueue，然后 enqueueMessage</span></span><br><span class="line"><span class="comment">// 这个名字很容易猜到这是消息入队的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(<span class="meta">@NonNull</span> Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                <span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">        Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(<span class="meta">@NonNull</span> MessageQueue queue, <span class="meta">@NonNull</span> Message msg,</span></span><br><span class="line"><span class="params">        <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    <span class="comment">// 将 msg 的 target 设置为 handler 自身，方便出队后拿到消息的发送者回调 handleMessage</span></span><br><span class="line">    msg.target = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 设置 workSourceUid</span></span><br><span class="line">    msg.workSourceUid = ThreadLocalWorkSource.getUid();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在new Handler的时候可以设置为异步，这样这个handler发送的消息都是异步消息</span></span><br><span class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就进入了 <code>MessageQueue#enqueueMessage</code></p><h3 id="MessageQueue-enqueueMessage"><a href="#MessageQueue-enqueueMessage" class="headerlink" title="MessageQueue#enqueueMessage"></a><strong>MessageQueue#enqueueMessage</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Message must have a target.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上锁，保证没有两条消息同时进行入队操作产生并发问题</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果这个 messgae 正在队列中，当然不能再次入队</span></span><br><span class="line">        <span class="comment">// 说一点小小的感悟吧，rust语言的移动语义可以让多次入队成为不可能，而在java中为了防范这种边界情况要写大量的检查代码。移动语义这个设计确实高明</span></span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg + <span class="string">&quot; This message is already in use.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果这个线程正在退出，当然不能给一条死掉的线程上的handler发消息</span></span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            <span class="type">IllegalStateException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                    msg.target + <span class="string">&quot; sending message to a Handler on a dead thread&quot;</span>);</span><br><span class="line">            Log.w(TAG, e.getMessage(), e);</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标记这个消息正在使用</span></span><br><span class="line">        msg.markInUse();</span><br><span class="line">        <span class="comment">// 设置这条信息应当从队列取出时的时间</span></span><br><span class="line">        msg.when = when;</span><br><span class="line">        <span class="comment">// 拿到消息队列的头节点，没错，消息队列是一个链表结构</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">        <span class="type">boolean</span> needWake;</span><br><span class="line">        <span class="comment">// 如果头节点为空 或者 when == 0 （意味着这个消息必须放置在头节点）或者 新插入的消息出队时间比头节点早</span></span><br><span class="line">        <span class="comment">// 就将插入的消息设置为新的头节点</span></span><br><span class="line">        <span class="comment">// 这里可以看出消息队列是一个优先队列</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            <span class="comment">// 如果事件队列现在正处于等待状态就之后唤醒他 （其实就是唤醒epoll等待的事件线程）</span></span><br><span class="line">            needWake = mBlocked;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don&#x27;t have to wake</span></span><br><span class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">            <span class="comment">// 在队列的中间插入。通常我们不会唤醒这个事件队列除非队列的头部有一个同步屏障</span></span><br><span class="line">            <span class="comment">// 且这条消息是队列中最早的异步消息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 正在阻塞 且 p.target == null 且 是异步消息</span></span><br><span class="line">            <span class="comment">// 如果 p.target == null 则说明队列的头部是一条屏障消息</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="literal">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            <span class="comment">// 经典算法题，双指针遍历链表</span></span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="comment">// 遍历到尾部或遍历到了自己应该待的地方 break 出去</span></span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果触发这一行，说明这条消息不是最早的异步消息，那么就不需要唤醒了</span></span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入</span></span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">        <span class="comment">// 如果需要唤醒就调用 nativeWake 进到 native 层对事件循环进行唤醒</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>激动人心的 native 之旅就要启程啦～</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nativeWake</span><span class="params">(<span class="type">long</span> ptr)</span>;</span><br></pre></td></tr></table></figure><h3 id="native-NativeMessageQueue-wake"><a href="#native-NativeMessageQueue-wake" class="headerlink" title="native NativeMessageQueue#wake"></a><strong>native NativeMessageQueue#wake</strong></h3><p>前往 <a href="http://aospxref.com/">AOSPXRef</a> 查看源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jclass clazz, jlong ptr)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="built_in">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;<span class="built_in">wake</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NativeMessageQueue::wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mLooper-&gt;<span class="built_in">wake</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出 java 层传入的 mPtr 其实就是 native 层的 MessageQueue 的指针。并且 wake 方法实际上是调用了 <code>Looper#wake</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Looper::wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">    <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ wake&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">uint64_t</span> inc = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// TEMP_FAILURE_RETRY 这个宏用于在系统调用失败时重试</span></span><br><span class="line">    <span class="comment">// 对 wakeEventFd 这个文件描述符写入唤醒信号 (1)，epoll IO 多路复用机制便会唤醒线程</span></span><br><span class="line">    <span class="type">ssize_t</span> nWrite = <span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">write</span>(mWakeEventFd.<span class="built_in">get</span>(), &amp;inc, <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)));</span><br><span class="line">    <span class="comment">// 写入失败对应的异常处理</span></span><br><span class="line">    <span class="keyword">if</span> (nWrite != <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EAGAIN) &#123;</span><br><span class="line">            <span class="built_in">LOG_ALWAYS_FATAL</span>(<span class="string">&quot;Could not write wake signal to fd %d (returned %zd): %s&quot;</span>, mWakeEventFd.<span class="built_in">get</span>(), nWrite, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们向 mWakeEventFd 写入了唤醒信号，Looper 所对应线程上的 epoll 机制会停止等待唤醒信号，对线程进行唤醒。</p><p>我们知道 epoll 是需要事先注册文件描述符的，找出这部分代码，我们继续分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Looper::rebuildEpollLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Close old epoll instance if we have one.</span></span><br><span class="line">    <span class="keyword">if</span> (mEpollFd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_CALLBACKS</span></span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ rebuildEpollLocked - rebuilding epoll set&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        mEpollFd.<span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate the new epoll instance and register the WakeEventFd.</span></span><br><span class="line">    <span class="comment">// 分配新的 epoll instance 并且注册 WakeEventFd</span></span><br><span class="line">    mEpollFd.<span class="built_in">reset</span>(<span class="built_in">epoll_create1</span>(EPOLL_CLOEXEC));</span><br><span class="line">    <span class="built_in">LOG_ALWAYS_FATAL_IF</span>(mEpollFd &lt; <span class="number">0</span>, <span class="string">&quot;Could not create epoll instance: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 epoll 事件 wakeEvent</span></span><br><span class="line">    epoll_event wakeEvent = <span class="built_in">createEpollEvent</span>(EPOLLIN, WAKE_EVENT_FD_SEQ);</span><br><span class="line">    <span class="comment">// 注册文件描述符</span></span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">epoll_ctl</span>(mEpollFd.<span class="built_in">get</span>(), EPOLL_CTL_ADD, mWakeEventFd.<span class="built_in">get</span>(), &amp;wakeEvent);</span><br><span class="line">    <span class="built_in">LOG_ALWAYS_FATAL_IF</span>(result != <span class="number">0</span>, <span class="string">&quot;Could not add wake event fd to epoll instance: %s&quot;</span>,</span><br><span class="line">            <span class="built_in">strerror</span>(errno));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册其他 epoll 事件：比如屏幕触摸事件，触摸屏幕时需要唤醒线程并在主线程回调 onTouch</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [seq, request] : mRequests) &#123;</span><br><span class="line">        epoll_event eventItem = <span class="built_in">createEpollEvent</span>(request.<span class="built_in">getEpollEvents</span>(), seq);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> epollResult = <span class="built_in">epoll_ctl</span>(mEpollFd.<span class="built_in">get</span>(), EPOLL_CTL_ADD, request.fd, &amp;eventItem);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">ALOGE</span>(<span class="string">&quot;Error adding epoll events for fd %d while rebuilding epoll set: %s&quot;</span>,</span><br><span class="line">                    request.fd, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册了之后，问题是在哪里进行 <code>epoll_wait</code> 等待呢？在这里先按下不表，我们从 <code>Handler#handleMessage</code> 开始分析。</p><h3 id="Handler-handleMessage"><a href="#Handler-handleMessage" class="headerlink" title="Handler#handleMessage"></a><strong>Handler#handleMessage</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handler#dispatchMessage</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Looper-loopOnce"><a href="#Looper-loopOnce" class="headerlink" title="Looper#loopOnce"></a><strong>Looper#loopOnce</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Looper#loopOnce</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loopOnce</span><span class="params">(<span class="keyword">final</span> Looper me,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">long</span> ident, <span class="keyword">final</span> <span class="type">int</span> thresholdOverride)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重要步骤，从队列中取出消息</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> me.mQueue.next(); <span class="comment">// might block</span></span><br><span class="line">    <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Printer</span> <span class="variable">logging</span> <span class="operator">=</span> me.mLogging;</span><br><span class="line">    <span class="keyword">if</span> (logging != <span class="literal">null</span>) &#123;</span><br><span class="line">        logging.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span></span><br><span class="line">                + msg.callback + <span class="string">&quot;: &quot;</span> + msg.what);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make sure the observer won&#x27;t change while processing a transaction.</span></span><br><span class="line">    <span class="comment">// 这个 Observer 可以在消息处理前和消息处理后做一些事情</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> sObserver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">traceTag</span> <span class="operator">=</span> me.mTraceTag;</span><br><span class="line">    <span class="type">long</span> <span class="variable">slowDispatchThresholdMs</span> <span class="operator">=</span> me.mSlowDispatchThresholdMs;</span><br><span class="line">    <span class="type">long</span> <span class="variable">slowDeliveryThresholdMs</span> <span class="operator">=</span> me.mSlowDeliveryThresholdMs;</span><br><span class="line">    <span class="keyword">if</span> (thresholdOverride &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        slowDispatchThresholdMs = thresholdOverride;</span><br><span class="line">        slowDeliveryThresholdMs = thresholdOverride;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">logSlowDelivery</span> <span class="operator">=</span> (slowDeliveryThresholdMs &gt; <span class="number">0</span>) &amp;&amp; (msg.when &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">logSlowDispatch</span> <span class="operator">=</span> (slowDispatchThresholdMs &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">needStartTime</span> <span class="operator">=</span> logSlowDelivery || logSlowDispatch;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">needEndTime</span> <span class="operator">=</span> logSlowDispatch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">        Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dispatchStart</span> <span class="operator">=</span> needStartTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> dispatchEnd;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">        token = observer.messageDispatchStarting();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">origWorkSource</span> <span class="operator">=</span> ThreadLocalWorkSource.setUid(msg.workSourceUid);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里把消息发给 Handler</span></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">            observer.messageDispatched(token, msg);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">            observer.dispatchingThrewException(token, msg, exception);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ThreadLocalWorkSource.restore(origWorkSource);</span><br><span class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">            Trace.traceEnd(traceTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logSlowDelivery) &#123;</span><br><span class="line">        <span class="keyword">if</span> (me.mSlowDeliveryDetected) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((dispatchStart - msg.when) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Drained&quot;</span>);</span><br><span class="line">                me.mSlowDeliveryDetected = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (showSlowLog(slowDeliveryThresholdMs, msg.when, dispatchStart, <span class="string">&quot;delivery&quot;</span>,</span><br><span class="line">                        msg)) &#123;</span><br><span class="line">                <span class="comment">// Once we write a slow delivery log, suppress until the queue drains.</span></span><br><span class="line">                me.mSlowDeliveryDetected = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logSlowDispatch) &#123;</span><br><span class="line">        showSlowLog(slowDispatchThresholdMs, dispatchStart, dispatchEnd, <span class="string">&quot;dispatch&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logging != <span class="literal">null</span>) &#123;</span><br><span class="line">        logging.println(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span> + msg.callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">    <span class="comment">// identity of the thread wasn&#x27;t corrupted.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">newIdent</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">        Log.wtf(TAG, <span class="string">&quot;Thread identity changed from 0x&quot;</span></span><br><span class="line">                + Long.toHexString(ident) + <span class="string">&quot; to 0x&quot;</span></span><br><span class="line">                + Long.toHexString(newIdent) + <span class="string">&quot; while dispatching to &quot;</span></span><br><span class="line">                + msg.target.getClass().getName() + <span class="string">&quot; &quot;</span></span><br><span class="line">                + msg.callback + <span class="string">&quot; what=&quot;</span> + msg.what);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息已经用完了，清除状态放入实例池</span></span><br><span class="line">    msg.recycleUnchecked();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别看上面一大堆代码，其实核心逻辑就是 <code>MessageQueue#next</code> 取出消息并把它分发给 <code>Handler</code>。其他的代码基本上就是单个消息处理太慢的警告机制。</p><h3 id="Looper-loop"><a href="#Looper-loop" class="headerlink" title="Looper#loop"></a><strong>Looper#loop</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (me.mInLoop) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;Loop again would have the queued messages be executed&quot;</span></span><br><span class="line">                + <span class="string">&quot; before this one completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    me.mInLoop = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow overriding a threshold with a system prop. e.g.</span></span><br><span class="line">    <span class="comment">// adb shell &#x27;setprop log.looper.1000.main.slow 1 &amp;&amp; stop &amp;&amp; start&#x27;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">thresholdOverride</span> <span class="operator">=</span></span><br><span class="line">        SystemProperties.getInt(<span class="string">&quot;log.looper.&quot;</span></span><br><span class="line">                + Process.myUid() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                + Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot;.slow&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    me.mSlowDeliveryDetected = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!loopOnce(me, ident, thresholdOverride)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要代码也就是最后的死循环，这个死循环只会在 MessageQueue 正在退出的时候返回。</p><h3 id="MessageQueue-next"><a href="#MessageQueue-next" class="headerlink" title="MessageQueue#next"></a><strong>MessageQueue#next</strong></h3><p>重头戏来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">    <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">    <span class="comment">// which is not supported.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ptr</span> <span class="operator">=</span> mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里出现了 IdleHandler 的字眼</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pendingIdleHandlerCount</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nextPollTimeoutMillis</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pollOnce 其实就是一个设置了超时时间的 epoll_wait</span></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">            <span class="type">Message</span> <span class="variable">prevMsg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mMessages;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 消息队列的头部有同步屏障</span></span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="literal">null</span> &amp;&amp; msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                <span class="comment">// 找出队列中的首个异步消息</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="literal">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果有消息</span></span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 这个消息还没有到时间，设置一下下轮循环执行的 pollOnce 的超时时间</span></span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="type">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 这个消息已经到时间了，从消息队列中取出返回</span></span><br><span class="line">                    <span class="comment">// Got a message.</span></span><br><span class="line">                    mBlocked = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="literal">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;Returning message: &quot;</span> + msg);</span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 队列空了，进入无限期的 epoll_wait 等待</span></span><br><span class="line">                <span class="comment">// No more messages.</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里是 IdleHandler 相关的内容，先去看看 IdleHandler 这个东西怎么用</span></span><br><span class="line">            <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">            <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">            <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">            <span class="comment">// 第一次空闲的时候，记录要运行的 idlehandler 的数量。</span></span><br><span class="line">            <span class="comment">// 空闲处理只在队列为空或第一条消息需要等待一段时间的时候执行</span></span><br><span class="line">            <span class="comment">// 说白了就是在 pollOnce 之前执行</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (mMessages == <span class="literal">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 没有 IdleHandler 的情况下单次循环在这里结束</span></span><br><span class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                mBlocked = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最大只会执行4个 IdleHandler</span></span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="literal">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> <span class="title class_">IdleHandler</span>[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run the idle handlers.</span></span><br><span class="line">        <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">IdleHandler</span> <span class="variable">idler</span> <span class="operator">=</span> mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="literal">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">keep</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">&quot;IdleHandler threw exception&quot;</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不保留就删掉</span></span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重制数量</span></span><br><span class="line">        <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行了idleHandler就不等待了，因为可能在idleHandler中已经发送了新的消息，重走一遍流程</span></span><br><span class="line">        <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">        <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="native-Looper-pollOnce"><a href="#native-Looper-pollOnce" class="headerlink" title="native Looper#pollOnce"></a><strong>native Looper#pollOnce</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Looper::pollOnce</span><span class="params">(<span class="type">int</span> timeoutMillis, <span class="type">int</span>* outFd, <span class="type">int</span>* outEvents, <span class="type">void</span>** outData)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">while</span> (mResponseIndex &lt; mResponses.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> Response&amp; response = mResponses.<span class="built_in">itemAt</span>(mResponseIndex++);</span><br><span class="line">            <span class="type">int</span> ident = response.request.ident;</span><br><span class="line">            <span class="keyword">if</span> (ident &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> fd = response.request.fd;</span><br><span class="line">                <span class="type">int</span> events = response.events;</span><br><span class="line">                <span class="type">void</span>* data = response.request.data;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">                <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - returning signalled identifier %d: &quot;</span></span><br><span class="line">                        <span class="string">&quot;fd=%d, events=0x%x, data=%p&quot;</span>,</span><br><span class="line">                        <span class="keyword">this</span>, ident, fd, events, data);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                <span class="keyword">if</span> (outFd != <span class="literal">nullptr</span>) *outFd = fd;</span><br><span class="line">                <span class="keyword">if</span> (outEvents != <span class="literal">nullptr</span>) *outEvents = events;</span><br><span class="line">                <span class="keyword">if</span> (outData != <span class="literal">nullptr</span>) *outData = data;</span><br><span class="line">                <span class="keyword">return</span> ident;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// result != 0 时可以退出</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">            <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - returning result %d&quot;</span>, <span class="keyword">this</span>, result);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">if</span> (outFd != <span class="literal">nullptr</span>) *outFd = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (outEvents != <span class="literal">nullptr</span>) *outEvents = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (outData != <span class="literal">nullptr</span>) *outData = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里如果返回0的话就要一直跑这个方法，不过我们知道pollInner实际上是不会返回的 (epoll_wait)</span></span><br><span class="line">        <span class="comment">// 所以在这里猜测正常情况下返回就退出循环，只有在某些情况下需要重试?</span></span><br><span class="line">        result = <span class="built_in">pollInner</span>(timeoutMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看 pollInner，东西真多，我们只关注重点代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Looper::pollInner</span><span class="params">(<span class="type">int</span> timeoutMillis)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">    <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - waiting: timeoutMillis=%d&quot;</span>, <span class="keyword">this</span>, timeoutMillis);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adjust the timeout based on when the next message is due.</span></span><br><span class="line">    <span class="keyword">if</span> (timeoutMillis != <span class="number">0</span> &amp;&amp; mNextMessageUptime != LLONG_MAX) &#123;</span><br><span class="line">        <span class="type">nsecs_t</span> now = <span class="built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">        <span class="type">int</span> messageTimeoutMillis = <span class="built_in">toMillisecondTimeoutDelay</span>(now, mNextMessageUptime);</span><br><span class="line">        <span class="keyword">if</span> (messageTimeoutMillis &gt;= <span class="number">0</span></span><br><span class="line">                &amp;&amp; (timeoutMillis &lt; <span class="number">0</span> || messageTimeoutMillis &lt; timeoutMillis)) &#123;</span><br><span class="line">            timeoutMillis = messageTimeoutMillis;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - next message in %&quot;</span> PRId64 <span class="string">&quot;ns, adjusted timeout: timeoutMillis=%d&quot;</span>,</span><br><span class="line">                <span class="keyword">this</span>, mNextMessageUptime - now, timeoutMillis);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Poll.</span></span><br><span class="line">    <span class="comment">// result的取值有四种: POLL_WAKE = -1 POLL_CALLBACK = -2 POLL_TIMEOUT = -3 POLL_ERROR = -4</span></span><br><span class="line">    <span class="type">int</span> result = POLL_WAKE;</span><br><span class="line">    mResponses.<span class="built_in">clear</span>();</span><br><span class="line">    mResponseIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We are about to idle.</span></span><br><span class="line">    mPolling = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建事件集合eventItems，EPOLL_MAX_EVENTS=16</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> eventItems[EPOLL_MAX_EVENTS];</span><br><span class="line">    <span class="comment">// 调用epoll_wait()来等待事件，如果有事件，就放入事件集合eventItems中，并返回事件数量，如果没有，就一直等，超时时间为我们传入的timeoutMillis</span></span><br><span class="line">    <span class="type">int</span> eventCount = <span class="built_in">epoll_wait</span>(mEpollFd.<span class="built_in">get</span>(), eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No longer idling.</span></span><br><span class="line">    mPolling = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Acquire lock.</span></span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    mLock.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rebuild epoll set if needed.</span></span><br><span class="line">    <span class="keyword">if</span> (mEpollRebuildRequired) &#123;</span><br><span class="line">        mEpollRebuildRequired = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">rebuildEpollLocked</span>();</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for poll error.</span></span><br><span class="line">    <span class="comment">// 如果发生的事件小于0，说明 epoll_wait 出异常了，设置 result 为 POLL_ERROR 后跳转到 Done</span></span><br><span class="line">    <span class="keyword">if</span> (eventCount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">            <span class="keyword">goto</span> Done;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;Poll failed with an unexpected error: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        result = POLL_ERROR;</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for poll timeout.</span></span><br><span class="line">    <span class="comment">// epoll_wait 超时返回，跳转到 Done</span></span><br><span class="line">    <span class="keyword">if</span> (eventCount == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - timeout&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        result = POLL_TIMEOUT;</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle all events.</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE</span></span><br><span class="line">    <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - handling events from %d fds&quot;</span>, <span class="keyword">this</span>, eventCount);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 走到这里说明有事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="comment">// 挨个取出事件进行响应</span></span><br><span class="line">        <span class="type">const</span> SequenceNumber seq = eventItems[i].data.u64;</span><br><span class="line">        <span class="type">uint32_t</span> epollEvents = eventItems[i].events;</span><br><span class="line">        <span class="comment">// 是 wake event</span></span><br><span class="line">        <span class="keyword">if</span> (seq == WAKE_EVENT_FD_SEQ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</span><br><span class="line">                <span class="comment">// 清除 wakeEventFd 的事件循环计数器，以便接收下一次事件</span></span><br><span class="line">                <span class="comment">// 事件文件描述符（如 eventfd）被设置为边缘触发（ET）模式。</span></span><br><span class="line">                <span class="comment">// 这意味着只有在状态发生变化时，epoll 才会返回这个文件描述符的事件。</span></span><br><span class="line">                <span class="comment">// 如果你不读取这个事件，状态就不会改变，所以 epoll 可能不会再次返回这个事件，即使有新的唤醒事件发生。</span></span><br><span class="line">                <span class="built_in">awoken</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">ALOGW</span>(<span class="string">&quot;Ignoring unexpected epoll events 0x%x on wake event fd.&quot;</span>, epollEvents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 响应其他事件</span></span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span>&amp; request_it = mRequests.<span class="built_in">find</span>(seq);</span><br><span class="line">            <span class="keyword">if</span> (request_it != mRequests.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">const</span> <span class="keyword">auto</span>&amp; request = request_it-&gt;second;</span><br><span class="line">                <span class="type">int</span> events = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) events |= EVENT_INPUT;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLOUT) events |= EVENT_OUTPUT;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLERR) events |= EVENT_ERROR;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLHUP) events |= EVENT_HANGUP;</span><br><span class="line">                mResponses.<span class="built_in">push</span>(&#123;.seq = seq, .events = events, .request = request&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">ALOGW</span>(<span class="string">&quot;Ignoring unexpected epoll events 0x%x for sequence number %&quot;</span> PRIu64</span><br><span class="line">                        <span class="string">&quot; that is no longer registered.&quot;</span>,</span><br><span class="line">                        epollEvents, seq);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Done: ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Invoke pending message callbacks.</span></span><br><span class="line">      <span class="comment">// 这里就是处理 native 层的消息，跟 java 层 handler 的逻辑差不多</span></span><br><span class="line">      <span class="comment">// native 层的消息是用 vector 存的</span></span><br><span class="line">      mNextMessageUptime = LLONG_MAX;</span><br><span class="line">      <span class="keyword">while</span> (mMessageEnvelopes.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="type">nsecs_t</span> now = <span class="built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">          <span class="type">const</span> MessageEnvelope&amp; messageEnvelope = mMessageEnvelopes.<span class="built_in">itemAt</span>(<span class="number">0</span>);</span><br><span class="line">          <span class="comment">// 消息到期</span></span><br><span class="line">          <span class="keyword">if</span> (messageEnvelope.uptime &lt;= now) &#123;</span><br><span class="line">              <span class="comment">// Remove the envelope from the list.</span></span><br><span class="line">              <span class="comment">// We keep a strong reference to the handler until the call to handleMessage</span></span><br><span class="line">              <span class="comment">// finishes.  Then we drop it so that the handler can be deleted *before*</span></span><br><span class="line">              <span class="comment">// we reacquire our lock.</span></span><br><span class="line">              &#123; <span class="comment">// obtain handler</span></span><br><span class="line">                  sp&lt;MessageHandler&gt; handler = messageEnvelope.handler;</span><br><span class="line">                  Message message = messageEnvelope.message;</span><br><span class="line">                  mMessageEnvelopes.<span class="built_in">removeAt</span>(<span class="number">0</span>);</span><br><span class="line">                  mSendingMessage = <span class="literal">true</span>;</span><br><span class="line">                  mLock.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE || DEBUG_CALLBACKS</span></span><br><span class="line">                  <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - sending message: handler=%p, what=%d&quot;</span>,</span><br><span class="line">                          <span class="keyword">this</span>, handler.<span class="built_in">get</span>(), message.what);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                  <span class="comment">// 回调 native 层 handler 的 handleMessage</span></span><br><span class="line">                  handler-&gt;<span class="built_in">handleMessage</span>(message);</span><br><span class="line">              &#125; <span class="comment">// release handler</span></span><br><span class="line"></span><br><span class="line">              mLock.<span class="built_in">lock</span>();</span><br><span class="line">              mSendingMessage = <span class="literal">false</span>;</span><br><span class="line">              <span class="comment">// 这里 result 就是把message回调给了handler</span></span><br><span class="line">              result = POLL_CALLBACK;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// The last message left at the head of the queue determines the next wakeup time.</span></span><br><span class="line">              <span class="comment">// 设置下条消息到期的时间 并跳出循环等待Java层的下一次轮询</span></span><br><span class="line">              mNextMessageUptime = messageEnvelope.uptime;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Release lock.</span></span><br><span class="line">      mLock.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Invoke all response callbacks.</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; mResponses.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">          Response&amp; response = mResponses.<span class="built_in">editItemAt</span>(i);</span><br><span class="line">          <span class="keyword">if</span> (response.request.ident == POLL_CALLBACK) &#123;</span><br><span class="line">              <span class="type">int</span> fd = response.request.fd;</span><br><span class="line">              <span class="type">int</span> events = response.events;</span><br><span class="line">              <span class="type">void</span>* data = response.request.data;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_POLL_AND_WAKE || DEBUG_CALLBACKS</span></span><br><span class="line">              <span class="built_in">ALOGD</span>(<span class="string">&quot;%p ~ pollOnce - invoking fd event callback %p: fd=%d, events=0x%x, data=%p&quot;</span>,</span><br><span class="line">                      <span class="keyword">this</span>, response.request.callback.<span class="built_in">get</span>(), fd, events, data);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">              <span class="comment">// Invoke the callback.  Note that the file descriptor may be closed by</span></span><br><span class="line">              <span class="comment">// the callback (and potentially even reused) before the function returns so</span></span><br><span class="line">              <span class="comment">// we need to be a little careful when removing the file descriptor afterwards.</span></span><br><span class="line">              <span class="type">int</span> callbackResult = response.request.callback-&gt;<span class="built_in">handleEvent</span>(fd, events, data);</span><br><span class="line">              <span class="keyword">if</span> (callbackResult == <span class="number">0</span>) &#123;</span><br><span class="line">                  AutoMutex _l(mLock);</span><br><span class="line">                  <span class="built_in">removeSequenceNumberLocked</span>(response.seq);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Clear the callback reference in the response structure promptly because we</span></span><br><span class="line">              <span class="comment">// will not clear the response vector itself until the next poll.</span></span><br><span class="line">              response.request.callback.<span class="built_in">clear</span>();</span><br><span class="line">              result = POLL_CALLBACK;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体流程其实就是 epoll_wait 拿到事件，处理事件并让 native 层的消息队列取一次消息。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a><strong>面试题</strong></h2><blockquote><p>来自蔷神</p></blockquote><h3 id="handler大致运转过程"><a href="#handler大致运转过程" class="headerlink" title="handler大致运转过程"></a><strong>handler大致运转过程</strong></h3><p><code>Handler#sendMessage</code> -&gt; <code>MessageQueue#enqueueMessage</code> 消息入队 -&gt; 如果消息入队时处于头部，或头部有同步屏障且插入的消息为最早的异步消息则唤醒 Looper <code>NativeMessageQueue#wake</code></p><p>Looper 被唤醒后轮询取消息，取到消息后看消息是否过期，如果没有过期就 pollOnce 等待至过期，过期了就出队发给 Handler，直到没有更多消息时 pollOnce 的过期时间被设置为 -1，无限期等待直到有新消息插入。</p><h3 id="handler消息类型以及每个类型的区别"><a href="#handler消息类型以及每个类型的区别" class="headerlink" title="handler消息类型以及每个类型的区别"></a><strong>handler消息类型以及每个类型的区别</strong></h3><p>同步消息，异步消息，同步屏障</p><h3 id="同步消息屏障的意义是什么-通常用来干嘛"><a href="#同步消息屏障的意义是什么-通常用来干嘛" class="headerlink" title="同步消息屏障的意义是什么? 通常用来干嘛?"></a><strong>同步消息屏障的意义是什么? 通常用来干嘛?</strong></h3><p>其实比较类似一些异步任务调度机制的任务偷取（好像内核态的任务调度也有偷取这个机制？）</p><p>在消息过多处理不过来的情况下优先处理异步消息，异步消息的异步其实指的就是不按消息队列中消息的顺序执行（毕竟在遇到屏障的时候只处理异步事件，不处理同步事件）</p><p>同步屏障用完要记得撤销，不然就再也接收不到同步消息了</p><h3 id="如果我要发送handler消息，是直接new嘛-为什么不这样？这样会造成什么影响"><a href="#如果我要发送handler消息，是直接new嘛-为什么不这样？这样会造成什么影响" class="headerlink" title="如果我要发送handler消息，是直接new嘛? 为什么不这样？这样会造成什么影响?"></a><strong>如果我要发送handler消息，是直接new嘛? 为什么不这样？这样会造成什么影响?</strong></h3><p>那肯定不new，使用 <code>Message.obtain</code> 从对象池中拿取。如果发送消息都直接new的话会对堆内存造成较大负担，所以才有对象复用机制。</p><h3 id="idlehandler是什么"><a href="#idlehandler是什么" class="headerlink" title="idlehandler是什么"></a><strong>idlehandler是什么</strong></h3><p>idlehandler 就是在消息队列取空或下一个消息需要等待时即将进入 pollOnce 等待之前回调的一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">IdleHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 false 就会在回调一次后移除</span></span><br><span class="line">    <span class="comment">// 返回 true 则会一直保留</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">queueIdle</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="idlehandler可以用来做哪一类任务"><a href="#idlehandler可以用来做哪一类任务" class="headerlink" title="idlehandler可以用来做哪一类任务"></a><strong>idlehandler可以用来做哪一类任务</strong></h3><p>执行优先级足够低的任务</p><h3 id="如果我频繁添加idlehandler是否发生anr"><a href="#如果我频繁添加idlehandler是否发生anr" class="headerlink" title="如果我频繁添加idlehandler是否发生anr"></a><strong>如果我频繁添加idlehandler是否发生anr</strong></h3><p>只要 idlehandler 中的处理没有耗时逻辑就不会，每次空闲执行的 idlehandler 不会超过4个。</p><h3 id="looper的loop是死循环会造成anr嘛？为什么"><a href="#looper的loop是死循环会造成anr嘛？为什么" class="headerlink" title="looper的loop是死循环会造成anr嘛？为什么"></a><strong>looper的loop是死循环会造成anr嘛？为什么</strong></h3><p>不会，因为 loop 进去有消息的时候会处理消息，没有消息的时候会进入 epoll 等待，anr 的原因在于没有及时处理消息。</p><h3 id="ANR-的原因"><a href="#ANR-的原因" class="headerlink" title="ANR 的原因"></a><strong>ANR 的原因</strong></h3><ul><li><p><strong>系统进程(system_server)</strong> 调度，设置定时监控（即埋下炸弹）</p></li><li><p>system_server 进程将任务派发到<strong>应用进程</strong>完成对消息的实际处理(执行任务)</p></li><li><p>最后，执行任务时间过长，在定时器超时前 system_server 还<strong>未收到任务完成的通知</strong>，触发 ANR（炸弹爆炸）</p></li></ul><p>没有及时处理 system_server 派发的任务，system_server 没有收到任务完成的通知，就触发了 ANR。</p><h3 id="handler-looper-messagequeue是怎么个关系一对一还是一对多，多对多"><a href="#handler-looper-messagequeue是怎么个关系一对一还是一对多，多对多" class="headerlink" title="handler looper messagequeue是怎么个关系一对一还是一对多，多对多"></a><strong>handler looper messagequeue是怎么个关系一对一还是一对多，多对多</strong></h3><p>Looper 跟 MessageQueue 是一对一的关系。MessageQueue 跟 Handler 是一对多的关系。</p><h3 id="looper和thread是一对一的关系是如何实现的"><a href="#looper和thread是一对一的关系是如何实现的" class="headerlink" title="looper和thread是一对一的关系是如何实现的"></a><strong>looper和thread是一对一的关系是如何实现的</strong></h3><p>使用 ThreadLocal 保存 Looper 实例</p><h3 id="threadlocal是什么，有用过吗"><a href="#threadlocal是什么，有用过吗" class="headerlink" title="threadlocal是什么，有用过吗"></a><strong>threadlocal是什么，有用过吗</strong></h3><p>ThreadLocal 本质上是保存在 Thread 上面的一张 HashMap，不同之处在与它的键使用 WeakReference 存储，在 set 时会清理 key &#x3D;&#x3D; null 的键值对。但用完的时候最好手动 remove，不然还是会内存泄漏。使用弱引用只是让 ThreadLocalMap 持有的 ThreadLocal 不会内存泄漏，ThreadLocal 对应的值还是会内存泄漏。</p><h3 id="messagequeue是什么数据结构"><a href="#messagequeue是什么数据结构" class="headerlink" title="messagequeue是什么数据结构"></a><strong>messagequeue是什么数据结构</strong></h3><p>链表实现的优先队列</p><h3 id="延迟消息是如何实现的"><a href="#延迟消息是如何实现的" class="headerlink" title="延迟消息是如何实现的"></a><strong>延迟消息是如何实现的</strong></h3><p>消息队列是一个优先队列，插入时进行排序。插入时如果消息处于头部，且事件队列处于等待状态就唤醒它，Looper 拿了头部的消息就会 <code>pollOnce</code> 等待这个消息需要等待的时间后再将消息出队传递给 Handler。如果有队列顶部有同步屏障的话，最早的异步消息将会进行唤醒处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解析&quot;&gt;&lt;a href=&quot;#解析&quot; class=&quot;headerlink&quot; title=&quot;解析&quot;&gt;&lt;/a&gt;&lt;strong&gt;解析&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;handler 源码也算是老生常谈了，之前也简单研究过源码。首先列出比较重要的几个类&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="android" scheme="http://blog.coldrain.ink/tags/android/"/>
    
    <category term="八股" scheme="http://blog.coldrain.ink/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://blog.coldrain.ink/2023/06/27/VKtzd4IhRo6MwPxfJuDcow4gnwb/"/>
    <id>http://blog.coldrain.ink/2023/06/27/VKtzd4IhRo6MwPxfJuDcow4gnwb/</id>
    <published>2023-06-27T16:01:19.000Z</published>
    <updated>2024-01-18T09:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了一下周围人的博客，觉得我原来的博客实在是花里胡哨且没有营养，于是删掉以前的所有文章，顺便换了个清爽的主题：butterfly，并且给博客支持了 RSS 订阅。</p><p>泡泡曾推荐我使用他的方案 <code>zola + no-style-please</code>。不过我实在懒得折腾 <code>zola</code>，并且 <code>no-style-please</code> 对我来说有些过于简约了。</p><p>总之以后我会尽我所能的产出高质量博客，而不是像以前一样鸡毛蒜皮的小事也要水一篇博文 :D</p><blockquote><p>简约并不是简陋，简约的目的是抽出设计中最核心的部分。这和编程一样，抽象出主要部分的程序总是很好理解且很好维护的，而不是追究任何一个细小的结构，为其套上各种设计模式，最终的结果只会是难以维护，和当初运用各种设计模式的初衷背离了。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看了一下周围人的博客，觉得我原来的博客实在是花里胡哨且没有营养，于是删掉以前的所有文章，顺便换了个清爽的主题：butterfly，并且给博客支持了 RSS 订阅。&lt;/p&gt;
&lt;p&gt;泡泡曾推荐我使用他的方案 &lt;code&gt;zola + no-style-please&lt;/code&gt;</summary>
      
    
    
    
    
    <category term="闲聊" scheme="http://blog.coldrain.ink/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
</feed>
